<?php

namespace ChatBundle\Repository;

/**
 * MessageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MessageRepository extends \Doctrine\ORM\EntityRepository
{
    public function findMessagesByChatAndUser($chat, $currentUser): array
    {
        $qb = $this->createQueryBuilder('m')
            ->select('m.content', 'u.username as sender', 'm.createdAt')
            ->join('m.user', 'u')
            ->where('m.chat = :chat')
            ->setParameter('chat', $chat)
            ->orderBy('m.createdAt', 'ASC');

        $messages = $qb->getQuery()->getResult();

        $formattedMessages = [];
        foreach ($messages as $message) {
            $formattedMessages[] = [
                'user' => $message['sender'] == $currentUser->getUsername() ? 'me' : $message['sender'],
                'content' => $message['content'],
                'createdAt' => $message['createdAt']->format('Y-m-d H:i:s'),
            ];
        }

        return $formattedMessages;
    }

    public function findMessagesByChatAndUserV2($chat, $currentUser): array
    {
        $connection = $this->getEntityManager()->getConnection();

        $sql = '
            SELECT
                m.content,
                CASE
                    WHEN u.id = :userId THEN \'me\'
                    ELSE u.username
                END AS sender,
                m.created_at as createdAt
            FROM
                message m
            INNER JOIN
                \"user\" u ON m.user_id = u.id
            WHERE
                m.chat_id = :chat
            ORDER BY
                m.created_at
        ';
        $stmt = $connection->prepare($sql);
        $stmt->bindValue('chat', $chat->getId());
        $stmt->bindValue('userId', $currentUser->id());
        $stmt->execute();

        $messages = $stmt->fetchAll();

        $formattedMessages = [];
        foreach ($messages as $message) {
            $formattedMessages[] = [
                'user' => $message['sender'],
                'text' => $message['content'],
                'createdAt' => $message['createdAt'],
            ];
        }

        return $formattedMessages;
    }
}
